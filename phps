#!/usr/bin/env bash
# This script was generated by bashly 1.1.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

version_command() {
  echo "$version"
}

phps_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps - Manage parallel PHP installations\n"
    echo

  else
    printf "phps - Manage parallel PHP installations\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps COMMAND\n"
  printf "  phps [COMMAND] --help | -h\n"
  printf "  phps --version | -v\n"
  echo

  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Generate bash autocompletions script\n" "$(green "completions")"
  printf "  %s   Configure the current PHP version.\n" "$(green "config")     "
  printf "  %s   Prepare your environment to manage different PHP versions.\n" "$(green "init")       "
  printf "  %s   Choose which PHP version to use by default.\n" "$(green "switch")     "
  printf "  %s   Choose which PHP version to use in the current session.\n" "$(green "use")        "
  printf "  %s   Manage PHP extensions\n" "$(green "ext")        "
  printf "  %s   Configure the Sury repo\n" "$(green "repo")       "
  printf "  %s   Manage PHP versions\n" "$(green "version")    "
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(blue "--version, -v")"
    printf "    Show version number\n"
    echo

  fi
}

phps_completions_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps completions - Generate bash autocompletions script\n"
    echo

  else
    printf "phps completions - Generate bash autocompletions script\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps completions\n"
  printf "  phps completions --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Examples:")"
    printf "  eval \"\$(phps completions)\"\n"
    echo

  fi
}

phps_config_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps config\n"
    echo

    printf "  Configure the current PHP version.\n  \n  Opens the php.ini associated with the current PHP version in \$EDITOR as root.\n"
    echo

  else
    printf "phps config - Configure the current PHP version.\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps config\n"
  printf "  phps config --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

phps_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps init\n"
    echo

    printf "  Prepare your environment to manage different PHP versions.\n  \n  It performs the following tasks:\n  \n  - Initializes the packages.sury.org repository, if it is not already.\n  - Creates files that allow the user update-alternatives settings to know which\n  PHP binaries it should manage.\n"
    echo

  else
    printf "phps init - Prepare your environment to manage different PHP versions.\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps init\n"
  printf "  phps init --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

phps_switch_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps switch\n"
    echo

    printf "  Choose which PHP version to use by default.\n  \n  Switches to the provided PHP version, in major.minor format, for use as the\n  default version across all shells.\n"
    echo

  else
    printf "phps switch - Choose which PHP version to use by default.\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps switch [VERSION]\n"
  printf "  phps switch --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "VERSION")"
    printf "    Which PHP version do you want to use (auto to use latest)?\n"
    printf "    Allowed: 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1, 8.2, 8.3, auto\n"
    printf "    Default: auto\n"
    echo

  fi
}

phps_use_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps use\n"
    echo

    printf "  Choose which PHP version to use in the current session.\n  \n  Details how to use the specified PHP version, in major.minor format, within\n  the current shell session.\n"
    echo

  else
    printf "phps use - Choose which PHP version to use in the current session.\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps use [VERSION]\n"
  printf "  phps use --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "VERSION")"
    printf "    Which PHP version do you want to use (auto to use latest)?\n"
    printf "    Allowed: 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1, 8.2, 8.3, auto\n"
    printf "    Default: auto\n"
    echo

  fi
}

phps_ext_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps ext - Manage PHP extensions\n"
    echo

  else
    printf "phps ext - Manage PHP extensions\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps ext COMMAND\n"
  printf "  phps ext [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Disable a previously enabled extension for the current PHP version.\n" "$(green "disable")"
  printf "  %s   Enable an extension for the current PHP version.\n" "$(green "enable") "
  printf "  %s   Install an extension for the current PHP version\n" "$(green "install")"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

phps_ext_disable_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps ext disable - Disable a previously enabled extension for the current PHP version.\n"
    echo

  else
    printf "phps ext disable - Disable a previously enabled extension for the current PHP version.\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps ext disable EXTENSION\n"
  printf "  phps ext disable --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "EXTENSION")"
    printf "    Extension name\n"
    echo

  fi
}

phps_ext_enable_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps ext enable - Enable an extension for the current PHP version.\n"
    echo

  else
    printf "phps ext enable - Enable an extension for the current PHP version.\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps ext enable EXTENSION\n"
  printf "  phps ext enable --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "EXTENSION")"
    printf "    Extension name\n"
    echo

  fi
}

phps_ext_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps ext install - Install an extension for the current PHP version\n"
    echo

  else
    printf "phps ext install - Install an extension for the current PHP version\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps ext install EXTENSION\n"
  printf "  phps ext install --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "EXTENSION")"
    printf "    Extension name\n"
    echo

  fi
}

phps_repo_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps repo - Configure the Sury repo\n"
    echo

  else
    printf "phps repo - Configure the Sury repo\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps repo COMMAND\n"
  printf "  phps repo [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Add the packages.sury.org repository to your apt sources list.\n" "$(green "add")"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

phps_repo_add_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps repo add\n"
    echo

    printf "  Add the packages.sury.org repository to your apt sources list.\n  \n  It first checks to see if a list entry already exists. If so, it aborts early\n  with a success status.\n  \n  Otherwise, it will add the packages.sury.org repo via a new apt sources.list.d\n  file, and then run apt-get update.\n"
    echo

  else
    printf "phps repo add - Add the packages.sury.org repository to your apt sources list.\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps repo add\n"
  printf "  phps repo add --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

phps_version_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps version - Manage PHP versions\n"
    echo

  else
    printf "phps version - Manage PHP versions\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps version COMMAND\n"
  printf "  phps version [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Remove or disable a PHP version.\n" "$(green "disable")  "
  printf "  %s   Enable a newly installed PHP version.\n" "$(green "enable")   "
  printf "  %s   Install a new PHP version.\n" "$(green "install")  "
  printf "  %s   List supported PHP versions.\n" "$(green "list")     "
  printf "  %s   Uninstall a PHP version.\n" "$(green "uninstall")"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

phps_version_disable_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps version disable\n"
    echo

    printf "  Remove or disable a PHP version.\n  \n  Removes a PHP version from the list of alternatives, which will prevent it\n  from being displayed by 'version list', as well as prevent the ability to\n  use/switch to the version, or enable/disable extensions for it.\n  \n  Typically, only use this after uninstalling the version from your computer.\n  \n  When providing a version, provide it in major.minor format.\n"
    echo

  else
    printf "phps version disable - Remove or disable a PHP version.\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps version disable [VERSION]\n"
  printf "  phps version disable --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "VERSION")"
    printf "    Which PHP version do you want to use (auto to use latest)?\n"
    printf "    Allowed: 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1, 8.2, 8.3, auto\n"
    printf "    Default: auto\n"
    echo

  fi
}

phps_version_enable_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps version enable\n"
    echo

    printf "  Enable a newly installed PHP version.\n  \n  Enables a previously installed PHP version, exposing it to allow switching to\n  and from the new version.\n  \n  When providing a version, provide it in major.minor format.\n"
    echo

  else
    printf "phps version enable - Enable a newly installed PHP version.\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps version enable [VERSION]\n"
  printf "  phps version enable --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "VERSION")"
    printf "    Which PHP version do you want to use (auto to use latest)?\n"
    printf "    Allowed: 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1, 8.2, 8.3, auto\n"
    printf "    Default: auto\n"
    echo

  fi
}

phps_version_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps version install\n"
    echo

    printf "  Install a new PHP version.\n  \n  Installs and enables a new PHP version, with any additional packages as\n  provided in the 'extension' arguments. The 'common', 'cli', and 'dev'\n  packages for the given version are always installed.\n  \n  When providing a version, provide in in major.minor format.\n"
    echo

  else
    printf "phps version install - Install a new PHP version.\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps version install [VERSION] [EXTENSION...]\n"
  printf "  phps version install --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "VERSION")"
    printf "    Which PHP version do you want to use (auto to use latest)?\n"
    printf "    Allowed: 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1, 8.2, 8.3, auto\n"
    printf "    Default: auto\n"
    echo

    printf "  %s\n" "$(blue "EXTENSION...")"
    printf "    Which additional extensions do you wish to install? (Provide package names\n    minus 'php{version}-' prefix)\n"
    echo

  fi
}

phps_version_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps version list\n"
    echo

    printf "  List supported PHP versions.\n  \n  Provides a list of installed PHP versions to choose from.\n"
    echo

  else
    printf "phps version list - List supported PHP versions.\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps version list\n"
  printf "  phps version list --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

phps_version_uninstall_usage() {
  if [[ -n $long_usage ]]; then
    printf "phps version uninstall\n"
    echo

    printf "  Uninstall a PHP version.\n  \n  Uninstalls and disables a PHP version, along with all packages installed for\n  that PHP version.\n  \n  When providing a version, provided it in major.minor format.\n"
    echo

  else
    printf "phps version uninstall - Uninstall a PHP version.\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  phps version uninstall [VERSION]\n"
  printf "  phps version uninstall --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(blue "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "VERSION")"
    printf "    Which PHP version do you want to use (auto to use latest)?\n"
    printf "    Allowed: 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1, 8.2, 8.3, auto\n"
    printf "    Default: auto\n"
    echo

  fi
}

normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

alternatives_command() {
    echo "update-alternatives --altdir ${HOME}/.local/etc/alternatives --admindir ${HOME}/.local/var/lib/alternatives"
}

alternatives_get_best_version() {
    local command
    local alternatives
    local binary

    command="$(alternatives_command)"
    alternatives="$($command --query php)"

    if [[ "${alternatives}" =~ ^Best:[[:space:]]+([![:space:]]+)$ ]]; then
        binary="${BASH_REMATCH[1]}"
        binary="$(basename "${binary}")"
        echo "${binary//php/}"
    else
        # get supported versions
        alternatives="$(alternatives_get_supported_versions)"
        if [[ "${alternatives}" == "" ]]; then
            # return null if empty
            echo ""
        else
            # sort versions
            alternatives="$(echo "${alternatives}" | sort)"
        fi
        # return last
        echo "${alternatives}" | tail -n1
    fi
}

alternatives_get_supported_versions() {
    local command
    local alternatives
    local version

    command="$(alternatives_command)"
    mapfile -t alternatives < <($command --list php)
    for version in "${alternatives[@]}"; do
        version="$(basename "${version}")"
        echo "${version//php/}"
    done
}

print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

create_config_file() {
    local version=$1
    local path=$2

    if ! [[ -f "${path}" ]];then
        blue "Creating ${path}"
        echo "(you may have to provide your password)"
        config_template | sudo tee "${path}"

        blue "Registering phps for PHP ${version}..."
        echo "(you may have to provide your password)"
        sudo phpenmod -v "${version}" -s cli phps
    fi
}

extension_disable() {
    local version=$1
    local extension=$2
    if sudo phpdismod -v "${version}" -s cli "${extension}"; then
        return 0
    else
        return 1
    fi
}

extension_enable() {
    local version=$1
    local extension=$2
    if sudo phpenmod -v "${version}" -s cli "${extension}"; then
        return 0
    else
        return 1
    fi
}

file_trim_trailing_lines() {
    local file=$1
    local end
    local trailing

    trailing=$(tac "$file" | sed -n '/^[ \t]*$/!q; p' | wc -c)
    end=$(( $(wc -c < "$file") - trailing ))
    dd status=none bs=1 seek=$end count=0 of="$file"
}

get_config_file() {
    local version=$1
    echo "/etc/php/${version}/mods-available/phps.ini"
}

get_env_php_version() {
    /usr/bin/env php -v | head -n1 | sed -E 's/^php ([1-9]+\.[0-9]+).*$/\1/i'
}

config_template() {
    /usr/bin/cat << EOF
; Machine-specific PHP settings.
; priority=99
;
; Add any PHP settings you wish to set, override, etc. to this file. By default,
; 'phps config' will run 'phpenmod' to ensure this configuration is used; the
; priority above will be used, ensuring it overrides any other settings defined
; elsewhere.
;
; If you are unsure what settings are available, look in ../{SAPI}/php.ini.
EOF
}

alternatives_template_php() {
    /usr/bin/cat << EOF
manual
%s/.local/bin/php

EOF
}

alternatives_template_php_config() {
    /usr/bin/cat << EOF
manual
%s/.local/bin/php-config

EOF
}

alternatives_template_phpize() {
    /usr/bin/cat << EOF
manual
%s/.local/bin/phpize

EOF
}

alternatives_template_phar() {
    /usr/bin/cat << EOF
manual
%s/.local/bin/phar

EOF
}

extension_config_template() {
    /usr/bin/cat << EOF
; configuration for php %s module
; priority=20
extension=%s.so
EOF
}

init_env() {
    local status=0
    local type

    for type in php phpize php-config phar;do
        if ! init_env_for_type "${type}"; then
            status=1
        fi
    done

    return $status
}

init_env_for_type() {
    local type=$1
    local alternativesDir="${HOME}/.local/var/lib/alternatives"
    local alternativesFile="${alternativesDir}/${type}"
    local prompt

    blue "Do you want to create the file ${alternativesFile} to handle your ${type} binary?"

    read -r prompt
    if [[ "${prompt}" =~ ^[y|Y] ]]; then
        if [[ ! -d "${alternativesDir}" ]]; then
            mkdir -p "${alternativesDir}"
        fi

        # shellcheck disable=SC2059
        case $type in
            php)
                printf "$(alternatives_template_php)" "${HOME}" > "${alternativesFile}"
                ;;
            php-config)
                printf "$(alternatives_template_php_config)" "${HOME}" > "${alternativesFile}"
                ;;
            phpize)
                printf "$(alternatives_template_phpize)" "${HOME}" > "${alternativesFile}"
                ;;
            phar)
                printf "$(alternatives_template_phar)" "${HOME}" > "${alternativesFile}"
                ;;
        esac

        green "Alternatives file created for ${type} binary"
        return 0
    else
        red "Aborting"
        return 1
    fi
}

is_env_initialized() {
    if [[ ! -f "${HOME}/.local/var/lib/alternatives/php" ]]; then
        return 1;
    fi

    if [[ ! -f "${HOME}/.local/var/lib/alternatives/php-config" ]]; then
        return 1;
    fi

    if [[ ! -f "${HOME}/.local/var/lib/alternatives/phpize" ]]; then
        return 1;
    fi

    if [[ ! -f "${HOME}/.local/var/lib/alternatives/phar" ]]; then
        return 1;
    fi

    return 0;
}

send_completions() {
  echo $'# phps completion                                          -*- shell-script -*-'
  echo $''
  echo $'# This bash completions script was generated by'
  echo $'# completely (https://github.com/dannyben/completely)'
  echo $'# Modifying it manually is not recommended'
  echo $''
  echo $'_phps_completions_filter() {'
  echo $'  local words="$1"'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local result=()'
  echo $''
  echo $'  if [[ "${cur:0:1}" == "-" ]]; then'
  echo $'    echo "$words"'
  echo $'  '
  echo $'  else'
  echo $'    for word in $words; do'
  echo $'      [[ "${word:0:1}" != "-" ]] && result+=("$word")'
  echo $'    done'
  echo $''
  echo $'    echo "${result[*]}"'
  echo $''
  echo $'  fi'
  echo $'}'
  echo $''
  echo $'_phps_completions() {'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")'
  echo $'  local compline="${compwords[*]}"'
  echo $''
  echo $'  case "$compline" in'
  echo $'    \'version uninstall\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h 5.6 7.0 7.1 7.2 7.3 7.4 8.0 8.1 8.2 8.3 auto")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'version disable\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h 5.6 7.0 7.1 7.2 7.3 7.4 8.0 8.1 8.2 8.3 auto")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'version install\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h 5.6 7.0 7.1 7.2 7.3 7.4 8.0 8.1 8.2 8.3 auto")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'version enable\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h 5.6 7.0 7.1 7.2 7.3 7.4 8.0 8.1 8.2 8.3 auto")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'version list\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'ext install\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'completions\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'ext disable\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'ext enable\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'repo add\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'version\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h disable enable install list uninstall")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'config\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'switch\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h 5.6 7.0 7.1 7.2 7.3 7.4 8.0 8.1 8.2 8.3 auto")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'repo\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h add")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'init\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'ext\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h disable enable install")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'use\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help -h 5.6 7.0 7.1 7.2 7.3 7.4 8.0 8.1 8.2 8.3 auto")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    *)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_phps_completions_filter "--help --version -h -v completions config ext init repo switch use version")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'  esac'
  echo $'} &&'
  echo $'complete -F _phps_completions phps'
  echo $''
  echo $'# ex: filetype=sh'
}

switch_phar() {
    local command
    local version=$1
    command="$(alternatives_command)"

    green "Switching phar binary to version ${version}"
    if ! $command --set phar "/usr/bin/phar${version}"; then
        red "Error switching phar binary version to ${version}!"
        return 1
    fi

    return 0
}

switch_php() {
    local command
    local version=$1
    command="$(alternatives_command)"

    green "Switching PHP binary to version ${version}"
    if ! $command --set php "/usr/bin/php${version}"; then
        red "Error switching PHP binary version to ${version}!"
        return 1
    fi

    return 0
}

switch_php_config() {
    local command
    local version=$1
    command="$(alternatives_command)"

    green "Switching php-config binary to version ${version}"
    if ! $command --set php-config "/usr/bin/php-config${version}"; then
        red "Error switching php-config binary version to ${version}!"
        return 1
    fi

    return 0
}

switch_phpize() {
    local command
    local version=$1
    command="$(alternatives_command)"

    green "Switching phpize binary to version ${version}"
    if ! $command --set phpize "/usr/bin/phpize${version}"; then
        red "Error switching phpize binary version to ${version}!"
        return 1
    fi

    return 0
}

version_disable() {
    local version=$1
    local alternativesFile="${HOME}/.local/var/lib/alternatives/php"
    local binary="/usr/bin/php${version}"
    local status=0
    local command
    local tmpfile

    green "Disabling PHP ${version}"

    if ! is_env_initialized; then
        red "You do not appear to have initialized your environment yet."
        echo "Please run 'init', followed by at least one invocation of 'version enable'"
        echo "before attempting to disable a version."
        return 1
    fi

    for type in php php-config phpize phar; do
        alternativesFile="${HOME}/.local/var/lib/alternatives/${type}"
        binary="/usr/bin/${type}${version}"

        green "Disabling ${type} binary for PHP ${version}"

        if ! grep -q "${binary}" "${alternativesFile}"; then
            green "Version does not appear to be registered; nothing to do"
        else
            tmpfile="$(mktemp)"
            command="$(printf '{gsub("\\\\n%s\\\\n[0-9]+",""); print}' "${binary}")"
            if ! awk -v RS="\0" -v ORS="" "${command}" "${alternativesFile}" > "${tmpfile}"; then
                red "The attempt to disable the version failed"
                echo "You will need to manually edit the file ${alternativesFile} to remove the entry for ${binary}"
                status=1
            else
                mv "${tmpfile}" "${alternativesFile}"
            fi
        fi
    done

    if [[ $status == 0 ]]; then
        green "Done!"
        return 0
    else
        red "Done, but with errors"
        return 1
    fi
}

version_enable() {
    local version=$1
    local priority="${version//./0}"
    local alternativesFile
    local binary
    local template

    green "Enabling PHP version ${version}"

    if ! is_env_initialized; then
        if ! init_env; then
            return 1
        fi
    fi

    for type in php php-config phpize phar; do
        alternativesFile="${HOME}/.local/var/lib/alternatives/${type}"
        binary="/usr/bin/${type}${version}"

        # shellcheck disable=SC2059
        case $type in
            php)
                template="$(printf "$(alternatives_template_php)" "${HOME}")"
                ;;
            php-config)
                template="$(printf "$(alternatives_template_php_config)" "${HOME}")"
                ;;
            phpize)
                template="$(printf "$(alternatives_template_phpize)" "${HOME}")"
                ;;
            phar)
                template="$(printf "$(alternatives_template_phar)" "${HOME}")"
                ;;
        esac

        green "Enabling ${type} binary for PHP version ${version}"

        if [[ ! -f "${binary}" ]]; then
            red "Unable to find ${type} binary for version ${version}; executable '${binary}' not found"
            return 1
        fi

        if grep -q "${binary}" "${alternativesFile}"; then
            green "Binary already registered!"
        else
            file_trim_trailing_lines "${alternativesFile}"
            if [[ "$(cat "${alternativesFile}")" == "${template}" ]]; then
                printf "\n\n%s\n%s\n\n" "${binary}" "${priority}" >> "${alternativesFile}"
            else
                printf "%s\n%s\n\n" "${binary}" "${priority}" >> "${alternativesFile}"
            fi
            green "Done!"
        fi
    done

    return 0
}

phps_completions_command() {
  send_completions

}

phps_config_command() {
  local version
  local config_file
  local editor

  version=$(get_env_php_version)
  config_file=$(get_config_file "${version}")
  create_config_file "${version}" "${config_file}"
  editor="${EDITOR:-"vim"}"

  sudo "${editor}" "${config_file}"

}

phps_init_command() {
  local alternativesDir="${HOME}/.local/var/lib/alternatives"
  local status=0
  local alternativesFile
  local type

  for type in php php-config phpize phar; do
      alternativesFile="${alternativesDir}/${type}"
      if [[ -f "${alternativesFile}" ]]; then
          green "Alternative for ${type} binary is already prepared!"
      elif ! init_env_for_type "${type}"; then
          status=1
      fi
  done

  if [[ $status == 1 ]]; then
      red "One or more errors when initializing the environment; please refer to the logs"
      exit 1
  fi

}

phps_switch_command() {
  local version="${args[version]}"
  local status=0
  local supported_versions

  if [[ "${version}" == "auto" ]]; then
      version="$(alternatives_get_best_version)"
  fi

  supported_versions="$(alternatives_get_supported_versions)"
  if [[ "${supported_versions}" != *"${version}"* ]]; then
      red "Unsupported version; must be one of:"
      red "${supported_versions}"
      exit 1
  else
      if ! switch_php "${version}"; then
          status=1
      fi

      if ! switch_phar "${version}"; then
          status=1
      fi

      if ! switch_php_config "${version}"; then
          status=1
      fi

      if ! switch_phpize "${version}"; then
          status=1
      fi

      if [[ $status != 0 ]]; then
          red "There were one or more errors switching to version ${version}!"
          echo "Please review the logs for details"
          exit $status
      fi
  fi

}

phps_use_command() {
  local version="${args[version]}"
  local supported_versions

  if [[ "${version}" == "auto" ]]; then
      version="$(alternatives_get_best_version)"
  fi

  supported_versions="$(alternatives_get_supported_versions)"
  if [[ "${supported_versions}" != *"${version}"* ]]; then
      red "Unsupported version; must be one of:"
      red "${supported_versions}"
      exit 1
  else
      green "Cut and paste the following line to temporarily switch to the selected PHP version:"
      echo "    alias php=/usr/bin/php${version}"
  fi

}

phps_ext_disable_command() {
  local extension="${args[extension]}"
  local version

  version="$(get_env_php_version)"

  green "Disabling extension ${extension} for PHP version ${version}"

  if ! extension_disable "${version}" "${extension}"; then
      red "An error occurred disabling the extension."
      red "Please review the output for details."
      exit 1
  fi

}

phps_ext_enable_command() {
  local extension="${args[extension]}"
  local version

  version="$(get_env_php_version)"

  green "Enabling extension ${extension} for PHP version ${version}"

  if ! extension_enable "${version}" "${extension}"; then
      red "An error occurred enabling the extension."
      red "Please review the output for details."
      exit 1
  fi

}

phps_ext_install_command() {
  local extension="${args[extension]}"
  local version
  local config

  version="$(get_env_php_version)"

  green "Installing extension ${extension} for PHP version ${version}"

  if ! sudo pecl -d "php_suffix=${version}" install "${extension}" && sudo pecl uninstall -r "${extension}"; then
      red "An error occurred; please review the output for details"
      exit 1
  fi

  config="$(extension_config_template)"
  # shellcheck disable=SC2059
  if ! printf "${config}" "${extension}" "${extension}" | sudo tee "/etc/php/${version}/mods-available/${extension}.ini"; then
      red "An error occurred creating the extension configuration file."
      red "Please review the output for details."
      exit 1
  fi

  if ! extension_enable "${version}" "${extension}"; then
      red "An error occurred enabling the extension."
      red "Please review the output for details."
      exit 1
  fi

}

phps_repo_add_command() {
  if grep -qrP '(packages\.sury\.org|ppa\.launchpadcontent\.net\/ondrej\/php)' /etc/apt/sources.list.d; then
      green "Repo is already present on your system"
  else
      green "Installing Sury repository using add-apt-repository"
      if add-apt-repository ppa:ondrej/php; then
          green "Repo injected and ready!"
      else
          red "Unable to inject Sury PPA; see above logs for details"
          exit 1
      fi
  fi

}

phps_version_disable_command() {
  local version="${args[version]}"

  if ! version_disable "${version}"; then
      exit 1
  fi

}

phps_version_enable_command() {
  local version="${args[version]}"

  if ! version_enable "${version}"; then
      exit 1
  fi

}

phps_version_install_command() {
  local version="${args[version]}"
  local packages=()
  local extension
  local extensions

  if [[ "${args[extension]+abc}" ]]; then
      eval "extensions=(${args[extension]})"
  else
      extensions=()
  fi

  extensions=("${extensions[@]}" "cli" "common" "dev")

  green "Installing PHP version ${version}"

  for extension in "${extensions[@]}"; do
      packages=("${packages[@]}" "php${version}-${extension}")
  done

  if ! sudo apt -y install "${packages[@]}"; then
      red "Error installing PHP ${version} (with extensions ${extensions[*]}); check logs for details"
      exit 1
  elif ! version_enable "${version}"; then
      exit 1
  fi

}

phps_version_list_command() {
  local versions
  local version

  mapfile -t versions < <(alternatives_get_supported_versions | sort)
  for version in "${versions[@]}"; do
      echo "- ${version}"
  done

}

phps_version_uninstall_command() {
  local version="${args[version]}"
  local packages

  green "Uninstalling PHP version ${version}"

  mapfile -t packages < <(dpkg -l | grep ^ii | awk '{print $2}' | grep "php${version}")
  if [[ "${packages[*]+abc}" == "" ]]; then
      green "Nothing to uninstall!"
  elif ! sudo apt -y remove "${packages[@]}"; then
      red "Error uninstalling PHP ${version}; check logs for details"
      exit 1
  elif ! version_disable "${version}"; then
      exit 1
  fi

}

parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        phps_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    completions)
      action="completions"
      shift
      phps_completions_parse_requirements "$@"
      shift $#
      ;;

    config)
      action="config"
      shift
      phps_config_parse_requirements "$@"
      shift $#
      ;;

    init)
      action="init"
      shift
      phps_init_parse_requirements "$@"
      shift $#
      ;;

    switch)
      action="switch"
      shift
      phps_switch_parse_requirements "$@"
      shift $#
      ;;

    use)
      action="use"
      shift
      phps_use_parse_requirements "$@"
      shift $#
      ;;

    ext)
      action="ext"
      shift
      phps_ext_parse_requirements "$@"
      shift $#
      ;;

    repo)
      action="repo"
      shift
      phps_repo_parse_requirements "$@"
      shift $#
      ;;

    version)
      action="version"
      shift
      phps_version_parse_requirements "$@"
      shift $#
      ;;

    "")
      phps_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

phps_completions_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_completions_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="completions"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

phps_config_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_config_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="config"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

phps_init_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="init"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

phps_switch_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_switch_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="switch"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['version']+x} ]]; then

          args['version']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  [[ -n ${args['version']:-} ]] || args['version']="auto"

  if [[ -n ${args['version']} ]] && [[ ! ${args['version']} =~ ^(5.6|7.0|7.1|7.2|7.3|7.4|8.0|8.1|8.2|8.3|auto)$ ]]; then
    printf "%s\n" "version must be one of: 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1, 8.2, 8.3, auto" >&2
    exit 1
  fi

}

phps_use_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_use_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="use"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['version']+x} ]]; then

          args['version']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  [[ -n ${args['version']:-} ]] || args['version']="auto"

  if [[ -n ${args['version']} ]] && [[ ! ${args['version']} =~ ^(5.6|7.0|7.1|7.2|7.3|7.4|8.0|8.1|8.2|8.3|auto)$ ]]; then
    printf "%s\n" "version must be one of: 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1, 8.2, 8.3, auto" >&2
    exit 1
  fi

}

phps_ext_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_ext_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    disable)
      action="disable"
      shift
      phps_ext_disable_parse_requirements "$@"
      shift $#
      ;;

    enable)
      action="enable"
      shift
      phps_ext_enable_parse_requirements "$@"
      shift $#
      ;;

    install)
      action="install"
      shift
      phps_ext_install_parse_requirements "$@"
      shift $#
      ;;

    "")
      phps_ext_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

phps_ext_disable_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_ext_disable_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="ext disable"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['extension']+x} ]]; then

          args['extension']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['extension']+x} ]]; then
    printf "missing required argument: EXTENSION\nusage: phps ext disable EXTENSION\n" >&2
    exit 1
  fi

}

phps_ext_enable_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_ext_enable_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="ext enable"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['extension']+x} ]]; then

          args['extension']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['extension']+x} ]]; then
    printf "missing required argument: EXTENSION\nusage: phps ext enable EXTENSION\n" >&2
    exit 1
  fi

}

phps_ext_install_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_ext_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="ext install"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['extension']+x} ]]; then

          args['extension']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['extension']+x} ]]; then
    printf "missing required argument: EXTENSION\nusage: phps ext install EXTENSION\n" >&2
    exit 1
  fi

}

phps_repo_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_repo_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    add)
      action="add"
      shift
      phps_repo_add_parse_requirements "$@"
      shift $#
      ;;

    "")
      phps_repo_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

phps_repo_add_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_repo_add_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="repo add"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

phps_version_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_version_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    disable)
      action="disable"
      shift
      phps_version_disable_parse_requirements "$@"
      shift $#
      ;;

    enable)
      action="enable"
      shift
      phps_version_enable_parse_requirements "$@"
      shift $#
      ;;

    install)
      action="install"
      shift
      phps_version_install_parse_requirements "$@"
      shift $#
      ;;

    list)
      action="list"
      shift
      phps_version_list_parse_requirements "$@"
      shift $#
      ;;

    uninstall)
      action="uninstall"
      shift
      phps_version_uninstall_parse_requirements "$@"
      shift $#
      ;;

    "")
      phps_version_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

phps_version_disable_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_version_disable_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="version disable"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['version']+x} ]]; then

          args['version']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  [[ -n ${args['version']:-} ]] || args['version']="auto"

  if [[ -n ${args['version']} ]] && [[ ! ${args['version']} =~ ^(5.6|7.0|7.1|7.2|7.3|7.4|8.0|8.1|8.2|8.3|auto)$ ]]; then
    printf "%s\n" "version must be one of: 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1, 8.2, 8.3, auto" >&2
    exit 1
  fi

}

phps_version_enable_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_version_enable_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="version enable"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['version']+x} ]]; then

          args['version']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  [[ -n ${args['version']:-} ]] || args['version']="auto"

  if [[ -n ${args['version']} ]] && [[ ! ${args['version']} =~ ^(5.6|7.0|7.1|7.2|7.3|7.4|8.0|8.1|8.2|8.3|auto)$ ]]; then
    printf "%s\n" "version must be one of: 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1, 8.2, 8.3, auto" >&2
    exit 1
  fi

}

phps_version_install_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_version_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="version install"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['version']+x} ]]; then
          args['version']=$1
          shift

        elif [[ -z ${args['extension']+x} ]]; then
          args['extension']="\"$1\""
          shift
        else
          args['extension']="${args[extension]} \"$1\""
          shift
        fi

        ;;

    esac
  done

  [[ -n ${args['version']:-} ]] || args['version']="auto"

  if [[ -n ${args['version']} ]] && [[ ! ${args['version']} =~ ^(5.6|7.0|7.1|7.2|7.3|7.4|8.0|8.1|8.2|8.3|auto)$ ]]; then
    printf "%s\n" "version must be one of: 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1, 8.2, 8.3, auto" >&2
    exit 1
  fi

}

phps_version_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_version_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="version list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

phps_version_uninstall_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        phps_version_uninstall_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="version uninstall"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['version']+x} ]]; then

          args['version']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  [[ -n ${args['version']:-} ]] || args['version']="auto"

  if [[ -n ${args['version']} ]] && [[ ! ${args['version']} =~ ^(5.6|7.0|7.1|7.2|7.3|7.4|8.0|8.1|8.2|8.3|auto)$ ]]; then
    printf "%s\n" "version must be one of: 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1, 8.2, 8.3, auto" >&2
    exit 1
  fi

}

initialize() {
  version="2.1.1dev"
  long_usage=''
  set -e


}

run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "completions") phps_completions_command ;;
    "config") phps_config_command ;;
    "init") phps_init_command ;;
    "switch") phps_switch_command ;;
    "use") phps_use_command ;;
    "ext") phps_ext_command ;;
    "ext disable") phps_ext_disable_command ;;
    "ext enable") phps_ext_enable_command ;;
    "ext install") phps_ext_install_command ;;
    "repo") phps_repo_command ;;
    "repo add") phps_repo_add_command ;;
    "version") phps_version_command ;;
    "version disable") phps_version_disable_command ;;
    "version enable") phps_version_enable_command ;;
    "version install") phps_version_install_command ;;
    "version list") phps_version_list_command ;;
    "version uninstall") phps_version_uninstall_command ;;
  esac
}

initialize
run "$@"
